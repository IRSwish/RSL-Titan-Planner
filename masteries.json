<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>RSL Tools | Mastery Builder</title>
  <link rel="stylesheet" href="style/style.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">

  <style>
  /* === Layout === */
  #builder {
    display: flex;
    justify-content: center;
    gap: 40px;
    flex-wrap: wrap;
    margin: 40px auto;
    max-width: 1400px;
  }

  .scroll-counter {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 40px;
    margin-top: 20px;
  }

  .scroll-type {
    display: flex;
    align-items: center;
    gap: 8px;
    font-family: 'Inter', sans-serif;
    font-size: 18px;
    color: var(--text-color);
  }

  .scroll-type img {
    width: 36px;
    height: 36px;
  }

  .tree {
    background: var(--event-bg);
    border: 2px solid var(--event-border);
    border-radius: 12px;
    padding: 20px;
    width: 360px;
    text-align: center;
    box-shadow: 0 0 10px rgba(212,175,55,0.2);
    position: relative;
  }

  .tree h2 {
    font-family: 'American Captain';
    color: var(--line-color);
    font-size: 24px;
    margin-bottom: 10px;
  }

  .reset-tree {
    position: absolute;
    top: 10px;
    left: 10px;
    background: linear-gradient(145deg, #1a1a1a, #2b2b2b);
    border: 2px solid var(--event-border);
    color: var(--text-color);
    font-weight: 600;
    font-size: 13px;
    padding: 4px 10px;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .reset-tree:hover {
    transform: scale(1.05);
    box-shadow: 0 0 8px var(--event-border);
  }

  .row {
    display: flex;
    justify-content: space-between;
    gap: 20px;
    margin: 25px 0;
    position: relative;
  }

  .row.centered {
    justify-content: center;
  }

  .mastery {
    width: 70px;
    height: 70px;
    background: #1a1a1a;
    border: 2px solid #555;
    clip-path: polygon(30% 0%, 70% 0%, 100% 30%, 100% 70%, 70% 100%, 30% 100%, 0% 70%, 0% 30%);
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
    z-index: 2;
    opacity: 1;
  }

  .mastery:hover {
    box-shadow: 0 0 10px rgba(212,175,55,0.3);
  }

  .mastery.active {
    border-color: var(--line-color);
    box-shadow: 0 0 12px var(--line-color);
    background-color: rgba(212,175,55,0.1);
  }

  .mastery.locked {
    opacity: 0.3;
    cursor: not-allowed;
  }

  /* Connection lines */
  .connection {
    position: absolute;
    width: 4px;
    height: 40px;
    left: 50%;
    top: 70px;
    transform: translateX(-50%);
    background: rgba(212,175,55,0.15);
    z-index: 1;
    opacity: 0;
    transition: opacity 0.2s ease, box-shadow 0.3s ease;
  }

  .connection.active {
    opacity: 1;
    background: linear-gradient(to bottom, #d4af37, #fce39b);
    box-shadow: 0 0 10px #d4af37;
  }

  </style>
</head>
<body>
  <div id="menu-container"></div>

  <div class="header-wrapper">
    <header id="page-title">Mastery Builder</header>
  </div>

  <div class="scroll-counter">
    <div class="scroll-type" id="basic-scrolls">
      <img src="style/img/Misc/Scroll-Basic.webp" alt="Basic Scrolls">
      <span>0 / 100</span>
    </div>
    <div class="scroll-type" id="advanced-scrolls">
      <img src="style/img/Misc/Scroll-Advanced.webp" alt="Advanced Scrolls">
      <span>0 / 600</span>
    </div>
    <div class="scroll-type" id="divine-scrolls">
      <img src="style/img/Misc/Scroll-Divine.webp" alt="Divine Scrolls">
      <span>0 / 950</span>
    </div>
  </div>

  <div id="builder">
    <div class="tree" data-branch="offense">
      <button class="reset-tree">Reset</button>
      <h2>Offense</h2>
      <div class="rows"></div>
    </div>

    <div class="tree" data-branch="defense">
      <button class="reset-tree">Reset</button>
      <h2>Defense</h2>
      <div class="rows"></div>
    </div>

    <div class="tree" data-branch="support">
      <button class="reset-tree">Reset</button>
      <h2>Support</h2>
      <div class="rows"></div>
    </div>
  </div>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const layout = [2, 4, 4, 4, 4, 4];
  const trees = document.querySelectorAll(".tree");

  // Build mastery layout
  trees.forEach(tree => {
    const branch = tree.dataset.branch;
    const container = tree.querySelector(".rows");

    layout.forEach((cols, row) => {
      const rowDiv = document.createElement("div");
      rowDiv.className = "row" + (cols === 2 ? " centered" : "");
      container.appendChild(rowDiv);

      for (let col = 0; col < cols; col++) {
        const m = document.createElement("div");
        m.className = "mastery";
        m.dataset.id = `${branch}-${row + 1}-${col + 1}`;

        // connection
        if (row < layout.length - 1) {
          const conn = document.createElement("div");
          conn.className = "connection";
          conn.dataset.from = `${branch}-${row + 1}-${col + 1}`;
          conn.dataset.to = `${branch}-${row + 2}-${col + 1}`;
          m.appendChild(conn);
        }

        rowDiv.appendChild(m);
      }
    });
  });

  const masteries = document.querySelectorAll(".mastery");

  // === Scroll costs ===
  const tierCost = { 1: 5, 2: 5, 3: 30, 4: 30, 5: 200, 6: 350 };
  const scrollDisplay = {
    basic: document.querySelector("#basic-scrolls span"),
    advanced: document.querySelector("#advanced-scrolls span"),
    divine: document.querySelector("#divine-scrolls span"),
  };

  // === Selection logic ===
  masteries.forEach(m => {
    m.addEventListener("click", () => {
      if (m.classList.contains("locked")) return;
      const branch = m.dataset.id.split("-")[0];
      const tier = parseInt(m.dataset.id.split("-")[1]);

      const activeTrees = getActiveTrees();
      const currentTree = document.querySelector(`[data-branch="${branch}"]`);

      // rule: max 2 trees
      if (!activeTrees.includes(branch) && activeTrees.length >= 2) return;

      // toggle
      if (m.classList.contains("active")) {
        m.classList.remove("active");
      } else {
        // enforce tier/row rules
        const rowMasteries = Array.from(currentTree.querySelectorAll(`.mastery[data-id^="${branch}-${tier}-"]`));
        const totalActiveThisTree = currentTree.querySelectorAll(".mastery.active").length;

        if (tier === 1 && rowMasteries.some(el => el.classList.contains("active"))) return; // only 1 in tier 1
        if (tier === 6 && currentTree.querySelectorAll('[data-id^="' + branch + '-6-"].active').length >= 1) return;
        if ([2,3,4,5].includes(tier) && totalActiveThisTree >= 3) return;

        // connection validation
        if (!isConnected(m)) return;

        m.classList.add("active");
      }

      updateConnections();
      updateLocks();
      updateScrolls();
    });
  });

  // === Helpers ===
  function getActiveTrees() {
    return Array.from(trees)
      .filter(t => t.querySelector(".mastery.active"))
      .map(t => t.dataset.branch);
  }

  function isConnected(m) {
    const [branch, tier, col] = m.dataset.id.split("-").map((x,i)=>i>0?parseInt(x):x);
    if (tier === 1) return true; // always allowed
    const prevTier = tier - 1;
    for (let delta of [-1, 0, 1]) {
      const prev = document.querySelector(`[data-id="${branch}-${prevTier}-${col + delta}"]`);
      if (prev && prev.classList.contains("active")) return true;
    }
    return false;
  }

  function updateConnections() {
    document.querySelectorAll(".connection").forEach(c => {
      const from = document.querySelector(`[data-id="${c.dataset.from}"]`);
      const to = document.querySelector(`[data-id="${c.dataset.to}"]`);
      c.classList.toggle("active", from?.classList.contains("active") && to?.classList.contains("active"));
    });
  }

  function updateLocks() {
    const activeTrees = getActiveTrees();
    trees.forEach(tree => {
      if (activeTrees.length >= 2 && !activeTrees.includes(tree.dataset.branch))
        tree.querySelectorAll(".mastery").forEach(m => m.classList.add("locked"));
      else
        tree.querySelectorAll(".mastery").forEach(m => m.classList.remove("locked"));
    });
  }

  function updateScrolls() {
    let basic = 0, advanced = 0, divine = 0;
    document.querySelectorAll(".mastery.active").forEach(m => {
      const tier = parseInt(m.dataset.id.split("-")[1]);
      const cost = tierCost[tier];
      if (tier <= 2) basic += cost;
      else if (tier <= 4) advanced += cost;
      else divine += cost;
    });
    scrollDisplay.basic.textContent = `${Math.min(basic,100)} / 100`;
    scrollDisplay.advanced.textContent = `${Math.min(advanced,600)} / 600`;
    scrollDisplay.divine.textContent = `${Math.min(divine,950)} / 950`;
  }

  // reset buttons
  document.querySelectorAll(".reset-tree").forEach(btn => {
    btn.addEventListener("click", e => {
      const tree = e.target.closest(".tree");
      tree.querySelectorAll(".mastery.active").forEach(m => m.classList.remove("active"));
      updateConnections();
      updateLocks();
      updateScrolls();
    });
  });
});
</script>
</body>
</html>
